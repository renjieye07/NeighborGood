//import needed libraries
const passport = require('passport');
const googleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;
const TwitterStrategy = require('passport-twitter').Strategy;
const LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const keys = require('../config/keys');
const mongoose = require('mongoose');

//create user model class
const User = mongoose.model('users');

//bcrypt saltrounds
const saltRounds = 10;

passport.serializeUser((user, done) => {
  done(null, user.id); //user id autogenerated by mongodb
});

passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

//passport js configuration
passport.use(
  new googleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback'
    },
    (accessToken, refreshToken, profile, done) => {
      //look for existing users
      User.findOne({
        googleID: profile.id
      }).then(existingUser => {
        if (existingUser) {
          //existing user found
          console.log(profile);
          done(null, existingUser);
        } else {
          //create a new user,
          //save the data to the database
          new User({ 
            googleID: profile.id,
            username: profile.name,
            email: profile.emails[0].value,
          })
            .save()
            .then(user => done(null, user));
        }
      });
    }
  )
);

//facebook
passport.use(
  new FacebookStrategy(
    {
      clientID: keys.facebookClientID,
      clientSecret: keys.facebookSecret,
      callbackURL: '/auth/facebook/callback',
      profileFields: ['id', 'email', 'name', 'gender', 'displayName']
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({
        facebookID: profile.id
      }).then(existingUser => {
        if (existingUser) {
          console.log('profile', profile);
          done(null, existingUser);
        } else {
          new User({ facebookID: profile.id })
            .save()
            .then(user => done(null, user));
        }
      });
    }
  )
);

//twitter
passport.use(
  new TwitterStrategy(
    {
      consumerKey: keys.twitterClientID,
      consumerSecret: keys.twitterClientSecret,
      callbackURL: '/auth/twitter/callback'
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({
        twitterID: profile.id
      }).then(existingUser => {
        if (existingUser) {
          console.log('profile', profile);
          done(null, existingUser);
        } else {
          new User({ twitterID: profile.id })
            .save()
            .then(user => done(null, user));
        }
      });
    }
  )
);

//LinkedIn
passport.use(
  new LinkedInStrategy(
    {
      clientID: keys.linkedInClientID,
      clientSecret: keys.linkedInClientSecret,
      callbackURL: '/auth/linkedin/callback'
    },
    (accessToken, refreshToken, profile, done) => {
      User.findOne({
        linkedinID: profile.id
      }).then(existingUser => {
        if (existingUser) {
          console.log('profile', profile);
          done(null, existingUser);
        } else {
          new User({ linkedinID: profile.id })
            .save()
            .then(user => done(null, user));
        }
      });
    }
  )
);

//email+password
passport.use(new LocalStrategy(
  (username, password, done) => {
    User.findOne({
      username: username,
    }).then(existingUser => {
      if (existingUser) {
        done(null, existingUser);
      } else {
        new User({
          username: username,
          password: password,
        })
      }
    })
  }
));
